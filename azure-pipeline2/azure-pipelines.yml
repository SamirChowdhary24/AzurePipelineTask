trigger:
- main

variables:
  - name: adminPassword
    value: $(TF_VAR_admin_password)

pool:
  name: 'Agent_Samir'

stages:
- stage: PrepareAndPlan
  displayName: 'Prepare & Plan Terraform'
  jobs:
  - job: Plan
    displayName: 'Terraform Plan'
    steps:
    
    - task: TerraformInstaller@1
      displayName: 'Install Terraform'
      inputs:
        terraformVersion: 'latest'

    - task: AzureCLI@2
      displayName: 'Azure Login (Implicit)'
      inputs:
        azureSubscription: 'SamNewConnection'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "Azure credentials sourced successfully."

    - task: CmdLine@2
      displayName: 'Terraform Init'
      inputs:
        script: |
          terraform init -upgrade
        workingDirectory: 'azure-pipeline2/environments/dev'

    - task: CmdLine@2
      displayName: 'Terraform Validate'
      inputs:
        script: |
          terraform validate
        workingDirectory: 'azure-pipeline2/environments/dev'

    - task: CmdLine@2
      displayName: 'Terraform Plan'
      inputs:
        script: |
          terraform plan -var="admin_password=$(adminPassword)" -out=tfplan
        workingDirectory: 'azure-pipeline2/environments/dev'

    - task: CmdLine@2
      displayName: 'List Files for Debugging'
      inputs:
        script: |
          echo "Listing files in the working directory before publishing:"
          ls -lR $(System.DefaultWorkingDirectory)/environments/dev
        workingDirectory: 'azure-pipeline2/environments/dev'


- stage: DeploymentApproval
  displayName: 'Manual Review'
  jobs:
  - deployment: Review
    displayName: 'Deployment Approval'
    environment: 'ProdEnvironment' # Ensure you have created an environment with this name
    strategy:
      runOnce:
        deploy:
          steps:
            - script: echo "Plan complete. Awaiting manual approval to apply changes."
              displayName: 'Awaiting Approval'

- stage: ApplyDeployment
  displayName: 'Apply Terraform Changes (Bypass Method)'
  dependsOn: DeploymentApproval
  condition: succeeded()

  jobs:
  - job: Apply
    displayName: 'Terraform Apply'
    steps:
    
    - task: AzureCLI@2
      displayName: 'Azure Re-Login'
      inputs:
        azureSubscription: 'SamNewConnection'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "Azure re-authenticated."
        
    - task: TerraformInstaller@1
      displayName: 'Ensure Terraform is Installed'
      inputs:
        terraformVersion: 'latest'

    - task: CmdLine@2
      displayName: 'Terraform Init (Required for Apply)'
      inputs:
        script: |
          terraform init -upgrade
        workingDirectory: 'azure-pipeline2/environments/dev'

    - task: CmdLine@2
      displayName: 'Terraform Apply'
      inputs:
        script: |
          # This command creates a new plan and immediately applies it.
          # It does not use the plan file from the previous stage.
          terraform apply -auto-approve -var="admin_password=$(adminPassword)"
        workingDirectory: 'azure-pipeline2/environments/dev'

    - task: CmdLine@2
      displayName: 'Output Deployment Details'
      inputs:
        script: |
          terraform output -json > output.json
          cat output.json
        workingDirectory: 'azure-pipeline2/environments/dev'